// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getNodes = `-- name: GetNodes :many
SELECT
    id, group_id, title, first_connection, last_connection
FROM
    nodes n
WHERE
    n.group_id = $1
`

func (q *Queries) GetNodes(ctx context.Context, groupID pgtype.UUID) ([]Node, error) {
	rows, err := q.db.Query(ctx, getNodes, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.Id,
			&i.GroupId,
			&i.Title,
			&i.FirstConnection,
			&i.LastConnection,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newNode = `-- name: NewNode :exec
INSERT INTO nodes (id, group_id, first_connection, last_connection) 
VALUES ($1, $2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
`

type NewNodeParams struct {
	Id      pgtype.UUID
	GroupId pgtype.UUID
}

func (q *Queries) NewNode(ctx context.Context, arg NewNodeParams) error {
	_, err := q.db.Exec(ctx, newNode, arg.Id, arg.GroupId)
	return err
}

const nodeExists = `-- name: NodeExists :one
SELECT
    id, group_id, title, first_connection, last_connection
FROM
    nodes n
WHERE
    n.id = $1
LIMIT
    1
`

func (q *Queries) NodeExists(ctx context.Context, id pgtype.UUID) (Node, error) {
	row := q.db.QueryRow(ctx, nodeExists, id)
	var i Node
	err := row.Scan(
		&i.Id,
		&i.GroupId,
		&i.Title,
		&i.FirstConnection,
		&i.LastConnection,
	)
	return i, err
}

const reconnectNode = `-- name: ReconnectNode :exec
UPDATE
    nodes n
SET
    last_connection = CURRENT_TIMESTAMP,
    group_id = $1
WHERE
    n.id = $2
`

type ReconnectNodeParams struct {
	GroupId pgtype.UUID
	Id      pgtype.UUID
}

func (q *Queries) ReconnectNode(ctx context.Context, arg ReconnectNodeParams) error {
	_, err := q.db.Exec(ctx, reconnectNode, arg.GroupId, arg.Id)
	return err
}

const updateLastConnection = `-- name: UpdateLastConnection :exec
UPDATE
    nodes n
SET
    last_connection = CURRENT_TIMESTAMP
WHERE
    n.id = $1
`

func (q *Queries) UpdateLastConnection(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateLastConnection, id)
	return err
}
